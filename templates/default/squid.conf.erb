<%= "cache_effective_user #{node[:squid][:user]}" if node[:squid][:user] %>
<%= "cache_effective_group #{node[:squid][:group]}" if node[:squid][:group] %>

pid_filename <%= node[:squid][:pid_file] %>

<%- if node[:squid][:access_log_path] %>
access_log <%= node[:squid][:logging_protocol] %>:<%= node[:squid][:access_log_path] %> <%= node[:squid][:logging_mode] %>
<%- else %>
access_log daemon:<%= node[:squid][:log_dir] %>/access.log squid
<%- end %>

<%- if node[:squid][:cache_log_path] %>
cache_log <%= node[:squid][:logging_protocol] %>:<%= node[:squid][:cache_log_path] %> <%= node[:squid][:logging_mode] %>
<%- else %>
cache_log daemon:<%= node[:squid][:log_dir] %>/cache.log squid
<%- end %>

hosts_file /etc/hosts

<% if node[:squid][:port].kind_of?(Array) %>
  <% node[:squid][:port].each do |port| %>
http_port <%= port %>
  <% end %>
<% else %>
http_port <%= node[:squid][:port] %>
<% end %>

<%- if node[:squid][:auth][:enable] %>
auth_param basic program <%= node[:squid][:auth][:program] %> <%= node[:squid][:auth][:file] %>
auth_param basic children <%= node[:squid][:auth][:children] %>
auth_param basic realm <%= node[:squid][:auth][:realm] %>
auth_param basic credentialsttl <%= node[:squid][:auth][:credentials_ttl] %>

acl authenticated proxy_auth REQUIRED
http_access allow authenticated
<%- end %>

<%- node[:squid][:ip_addresses].each_with_index do |ip_address, index| %>
acl ip_<%= index %> localip <%= ip_address %>
tcp_outgoing_address <%= ip_address %> ip_<%= index %>
<%- end if node[:squid][:ip_addresses] && node[:squid][:ip_addresses].any? %>

<%- if node[:squid][:dns][:nameservers] && node[:squid][:dns][:nameservers].any? %>
dns_nameservers <%= node[:squid][:dns][:nameservers].join(" ") %>
<%- end %>

<%= "ipcache_size #{node[:squid][:dns][:ipcache_size]}" if node[:squid][:dns][:ipcache_size] %>
<%= "negative_dns_ttl #{node[:squid][:dns][:negative_dns_ttl]}" if node[:squid][:dns][:negative_dns_ttl] %>

<%- if node[:squid][:mode] == 'proxy' %>
icp_port 0
htcp_port 0
snmp_port 0

icp_access deny all
htcp_access deny all
snmp_access deny all
#no_cache deny all
<%- end %>

<%- if node[:squid][:enable_cache_dir] %>
cache_dir ufs <%= node[:squid][:cache_dir] %> <%= node[:squid][:cache_size] %> 16 256
<%- end %>
coredump_dir <%= node[:squid][:coredump_dir] %>
maximum_object_size <%= node[:squid][:max_obj_size] %> <%= node[:squid][:max_obj_size_unit] %>
cache_mem <%= node[:squid][:cache_mem] %> MB

memory_pools off
half_closed_clients off

forwarded_for off
request_header_access Allow allow all
request_header_access Authorization allow all
request_header_access WWW-Authenticate allow all
request_header_access Proxy-Authorization allow all
request_header_access Proxy-Authenticate allow all
request_header_access Cache-Control allow all
request_header_access Content-Encoding allow all
request_header_access Content-Length allow all
request_header_access Content-Type allow all
request_header_access Date allow all
request_header_access Expires allow all
request_header_access Host allow all
request_header_access If-Modified-Since allow all
request_header_access Last-Modified allow all
request_header_access Location allow all
request_header_access Pragma allow all
request_header_access Accept allow all
request_header_access Accept-Charset allow all
request_header_access Accept-Encoding allow all
request_header_access Accept-Language allow all
request_header_access Content-Language allow all
request_header_access Mime-Version allow all
request_header_access Retry-After allow all
request_header_access Title allow all
request_header_access Connection allow all
request_header_access Proxy-Connection allow all
request_header_access User-Agent allow all
request_header_access Cookie allow all
request_header_access All deny all
